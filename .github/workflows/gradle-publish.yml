name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'adopt'
        java-version: '17'

    - name: Build with gradle
      run: bash ./gradlew bootJar
#
#    - name: copy file via ssh key
#      uses: appleboy/scp-action@v0.1.4
#      with:
#        host: ${{ secrets.EC2_HOST }}
#        username: ${{ secrets.EC2_USERNAME }}
#        port: ${{ secrets.EC2_SSH_PORT }}
#        key: ${{ secrets.SSH_PRIVATE_KEY }}
#        source: "build/libs/demo-0.0.1-SNAPSHOT.jar"
#        target: server
#
    - name: Copy artifacts to EC2
      run: |
        cd build/libs
        ls -l
        sudo scp -i ${{ secrets.SSH_PRIVATE_KEY }} "demo-0.0.1-SNAPSHOT.jar" ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:home/ubuntu/server
#
#    - name: Deploy to EC2
#      uses: appleboy/ssh-action@master
#      with:
#        host: ${{ secrets.EC2_HOST }}
#        username: ${{ secrets.EC2_USERNAME }}
#        key: ${{ secrets.SSH_PRIVATE_KEY }}
#        port: ${{ secrets.EC2_SSH_PORT }}
#        script: |
##          sudo mkdir server
#          cd /home/ubuntu/server
#          sudo systemctl stop rebootServer
#          sudo systemctl start rebootServer
#
#    - name: copy file via ssh key
#      uses: appleboy/scp-action@master
#      with:
#        host: ${{ secrets.EC2_HOST }}
#        username: ${{ secrets.EC2_USERNAME }}
#        key: ${{ secrets.SSH_PRIVATE_KEY }}
#        port: ${{ secrets.EC2_SSH_PORT }}
#        source: "build/libs/*.jar"
#        target: "server"
#    - name: Deploy to EC2
#      uses: appleboy/ssh-action@master
#      with:
#        host: ${{ secrets.EC2_HOST }}
#        username: ${{ secrets.EC2_USERNAME }}
#        key: ${{ secrets.SSH_PRIVATE_KEY }}
#        port: ${{ secrets.EC2_SSH_PORT }}
#        script: |
##          sudo mkdir /home/ubuntu/server
#          cd /home/ubuntu/server
#          sudo systemctl stop rebootServer
#          sudo systemctl start rebootServer
#    - name: Decode SSH Private Key
#      run: echo "${{ secrets.SSH_PRIVATE_KEY }}" | base64 -d > $HOME/.ssh/thinh-aws-key.pem
#    - name: Set up SSH
#      run: |
#        eval "$(ssh-agent -s)"
#        chmod 600 $HOME/.ssh/thinh-aws-key.pem
#        ssh-add $HOME/.ssh/thinh-aws-key.pem
